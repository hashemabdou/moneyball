To build the "Moneyball" website, we will use Python with the Flask framework for the backend, and HTML, CSS, and JavaScript for the frontend. We will also use a database to store user information and game data. Here's an outline of the core components and their purposes:

Backend (Python with Flask):
- `app.py`: The main entry point for the Flask application.
- `models.py`: Defines the database models for users, admin, games, and picks.
- `forms.py`: Contains the forms for user registration, login, and game picks.
- `routes.py`: Handles the routing of web pages and form submissions.
- `auth.py`: Manages user authentication and authorization.
- `admin.py`: Contains functions for admin-specific actions like starting a new round.
- `utils.py`: Helper functions for various tasks.

Frontend (HTML, CSS, JavaScript):
- `layout.html`: The base template that includes the navbar and common elements.
- `index.html`: The homepage template for visitors.
- `about.html`: The about page template with the rules of the game.
- `signup.html`: The sign-up page template.
- `signin.html`: The sign-in page template.
- `user_home.html`: The home page template for signed-in users.
- `admin_home.html`: The home page template for the admin.
- `leaderboard.html`: The leaderboard display template.
- `styles.css`: The stylesheet for the website.
- `scripts.js`: JavaScript file for dynamic behavior on the frontend.

Database:
- SQLite will be used for simplicity and ease of setup.

Let's start with the Flask application structure and the main entry point.

app.py
```python
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///moneyball.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'signin'

from routes import *

if __name__ == '__main__':
    app.run(debug=True)
```

models.py
```python
from app import db
from flask_login import UserMixin
from datetime import datetime

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    picks = db.relationship('Pick', backref='user', lazy=True)

class Game(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    home_team = db.Column(db.String(100), nullable=False)
    away_team = db.Column(db.String(100), nullable=False)
    game_date = db.Column(db.DateTime, nullable=False)
    picks = db.relationship('Pick', backref='game', lazy=True)

class Pick(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    team = db.Column(db.String(100), nullable=False)
    round = db.Column(db.Integer, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    game_id = db.Column(db.Integer, db.ForeignKey('game.id'), nullable=False)
    status = db.Column(db.String(50), nullable=False)  # Alive, Eliminated

db.create_all()
```

forms.py
```python
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, Email, EqualTo

class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Sign Up')

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Sign In')

class PickForm(FlaskForm):
    # This form will be dynamically generated based on available games
    pass
```

routes.py
```python
from flask import render_template, url_for, redirect, flash
from app import app, db
from models import User, Game, Pick
from forms import RegistrationForm, LoginForm
from flask_login import login_user, logout_user, current_user, login_required

@app.route('/')
@app.route('/home')
def home():
    if current_user.is_authenticated and current_user.is_admin:
        return redirect(url_for('admin_home'))
    elif current_user.is_authenticated:
        return redirect(url_for('user_home'))
    else:
        return render_template('index.html')

@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    form = RegistrationForm()
    if form.validate_on_submit():
        # Create a new user and add to the database
        pass
    return render_template('signup.html', form=form)

@app.route('/signin', methods=['GET', 'POST'])
def signin():
    form = LoginForm()
    if form.validate_on_submit():
        # Authenticate the user and log them in
        pass
    return render_template('signin.html', form=form)

@app.route('/signout')
def signout():
    logout_user()
    return redirect(url_for('home'))

@app.route('/user_home')
@login_required
def user_home():
    # Display user-specific home page
    pass

@app.route('/admin_home')
@login_required
def admin_home():
    # Display admin-specific home page
    pass

# Additional routes for admin actions, user actions, and displaying the leaderboard will be added here.
```

auth.py, admin.py, utils.py, and the frontend templates will be implemented similarly, following the Flask and web development best practices. The frontend will be styled with CSS to match the modern and clean soccer theme, and JavaScript will be used to enhance interactivity.

requirements.txt
```
Flask==2.0.2
Flask-SQLAlchemy==2.5.1
Flask-WTF==0.15.1
Flask-Login==0.5.0
WTForms==3.0.0
email-validator==1.1.3
```

This is a high-level overview of the implementation. Each file will be fleshed out with the necessary code to fulfill the requirements of the Moneyball website. The database models will be used to store user data, game data, and picks. The forms will handle user input for registration, login, and game picks. The routes will manage the navigation and logic of the website, and the templates will present the information to the users in a clean and modern design.

Next, we will implement the frontend templates, styles, and scripts, and complete the backend logic for user authentication, game management, and leaderboard display.

Please note that this is a complex project and the implementation provided here is a high-level overview. A fully working implementation would require more detailed code for each component, including proper form validations, database interactions, user authentication logic, admin functionalities, and dynamic frontend elements.