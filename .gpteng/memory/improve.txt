PLANNING:
To implement the frontend templates, styles, and scripts, and complete the backend logic for user authentication, game management, and leaderboard display, we need to perform the following steps:

1. Create the frontend templates for the home page, about page, sign up, sign in, user home, and admin home. These templates will be created using HTML and will be styled with CSS to match the modern, soccer-themed design requirements.

2. Implement the backend logic for user authentication. This includes handling the sign-up process by storing user credentials in the database and handling the sign-in process by authenticating users against the stored credentials.

3. Implement the game management logic. This includes allowing the admin to start a new round, input games for the week, and close registration for a new round.

4. Implement the leaderboard display logic. This includes querying the database for past winners and displaying them on the home page.

5. Create the necessary styles and scripts to enhance the user interface and user experience.

6. Update the `requirements.txt` file if any new dependencies are introduced during the implementation.

7. Write the necessary route handlers in `routes.py` to serve the new templates and handle form submissions.

8. Update the `models.py` file to include any new models or relationships needed for the game management and leaderboard features.

9. Create a new admin account with the ability to manage the game rounds.

10. Implement the logic for users to make their picks and display their current picks, previous round performance, total all-time winnings, and progress this round on their home page.

11. Implement the logic to automatically generate an overview summary table of every pick and which team they picked that round once the admin closes the registration for a new round.

OUTPUT:
Since the implementation of the entire system is complex and cannot be covered in a single response, I will provide the necessary *edit blocks* for the initial setup of the frontend templates and the update to the `requirements.txt` file if new dependencies are introduced.

For the frontend templates, we will create new HTML files in a `templates` directory. We will also create a `static` directory for CSS and JavaScript files. The `requirements.txt` file will be updated if new dependencies are added during the implementation.

Let's start by creating the base template that other templates will extend:

```html
new file: templates/base.html
<<<<<<< HEAD
=======
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Moneyball</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <nav>
        <ul>
            <li><a href="{{ url_for('home') }}">Home</a></li>
            <li><a href="{{ url_for('about') }}">About</a></li>
            {% if current_user.is_authenticated %}
                <li><a href="{{ url_for('signout') }}">Sign Out</a></li>
            {% else %}
                <li><a href="{{ url_for('signin') }}">Sign In</a></li>
                <li><a href="{{ url_for('signup') }}">Sign Up</a></li>
            {% endif %}
        </ul>
    </nav>
    {% block content %}{% endblock %}
</body>
</html>
>>>>>>> updated
```

Next, we will create the home page template:

```html
new file: templates/index.html
<<<<<<< HEAD
=======
{% extends 'base.html' %}

{% block content %}
    <h1>Welcome to Moneyball</h1>
    <!-- Leaderboard will be included here -->
{% endblock %}
>>>>>>> updated
```

And the about page template:

```html
new file: templates/about.html
<<<<<<< HEAD
=======
{% extends 'base.html' %}

{% block content %}
    <h2>About Moneyball</h2>
    <p>The rules of the game are as follows: ...</p>
{% endblock %}
>>>>>>> updated
```

For the CSS file:

```css
new file: static/styles.css
<<<<<<< HEAD
=======
/* Add CSS styles for the modern, soccer-themed design */
body {
    font-family: Arial, sans-serif;
}

nav ul {
    list-style-type: none;
    padding: 0;
}

nav ul li {
    display: inline;
    margin-right: 10px;
}

/* Additional styles will be added here */
>>>>>>> updated
```

For the JavaScript file (if needed):

```javascript
new file: static/scripts.js
<<<<<<< HEAD
=======
// Add JavaScript code for interactive elements
>>>>>>> updated
```

The `requirements.txt` file does not need an update at this moment since no new dependencies were introduced. However, if during the implementation process we find that new packages are needed, we will update this file accordingly.

The backend logic, including user authentication, game management, and leaderboard display, will be implemented in subsequent steps, and the corresponding *edit blocks* will be provided as we progress.